/* NOTE this file is autogenerated by Scalate : see http://scalate.fusesource.org/ */

import _root_.scala.collection.JavaConversions._
import _root_.org.fusesource.scalate.support.TemplateConversions._
import _root_.org.fusesource.scalate.util.Measurements._

object $_scalate_$_scalate_tmp_5725572223700121517_jade {
  def $_scalate_$render($_scalate_$_context: _root_.org.fusesource.scalate.RenderContext): Unit = {
    import _root_.org.fusesource.scalate.support.RenderHelper.{sanitize=>$_scalate_$_sanitize, preserve=>$_scalate_$_preserve, indent=>$_scalate_$_indent, smart_sanitize=>$_scalate_$_smart_sanitize, attributes=>$_scalate_$_attributes}
    ;{
      implicit val context: _root_.org.fusesource.scalate.support.DummyRenderContext = $_scalate_$_context.attribute("context")
      import context._
      ;{
        val response: _root_.org.fusesource.scalate.support.DummyResponse = $_scalate_$_context.attributeOrElse("response", new _root_.org.fusesource.scalate.support.DummyResponse())
        
    // common imports go here
    import _root_.Website._;
    
        
        $_scalate_$_context << ( "<div class=\"left\">\n  <h1>How it works</h1>\n</div>\n<div class=\"right\">\n  " );
        $_scalate_$_context << ( $_scalate_$_indent ( "  ", $_scalate_$_context.value ( _root_.org.fusesource.scalate.filter.FilterRequest("markdown", $_scalate_$_context.capture { 
          $_scalate_$_context << ( "\nThe *${project_name}* documentation and site is created using Scalate\nand is stored in git in the same [source control system as the\ncode](source.html)\n\n**Note:** For code highlighting you will need to\n[install](http://pygments.org/download/)\n[http://pygments.org/](http://pygments.org).\n" );
        } ) ) ) );
        $_scalate_$_context << ( "\n</div>\n<div class=\"left\">\n  <h1>Editing the source code</h1>\n</div>\n<div class=\"right\">\n  " );
        $_scalate_$_context << ( $_scalate_$_indent ( "  ", $_scalate_$_context.value ( _root_.org.fusesource.scalate.filter.FilterRequest("markdown", $_scalate_$_context.capture { 
          $_scalate_$_context << ( "\nIf you [grab the source code](source.html) you will find the site\nsource in the *${project_id}-website* directory.  The website is\nalso built using Maven so, you would\n\n    cd ${project_id}-website\n    mvn install\n\nIf you want to edit the files in your text editor and be able to\nimmediately see the site re-rendered in a browser then use\n\n    mvn jetty:run\n\nYou can now surf the site and see changes immediately.\n\nIf you are on OS X then we highly recommend\n[TextMate](http://macromates.com/) as a great editor which supports\nTextile and Markdown" );
        } ) ) ) );
        $_scalate_$_context << ( "\n</div>\n<div class=\"left\">\n  <h1>Deploying the site</h1>\n</div>\n<div class=\"right\">\n  " );
        $_scalate_$_context << ( $_scalate_$_indent ( "  ", $_scalate_$_context.value ( _root_.org.fusesource.scalate.filter.FilterRequest("markdown", $_scalate_$_context.capture { 
          $_scalate_$_context << ( "\nThe site is automatically deployed by the CI builds, so you can\nsimply wait for the changes to be automatically pushed to the project\nsite.\n\nYou can manually deploy the site using Maven:\n\n    mvn deploy\n\nSince deployment to our webserver requires proper authorization,\nyou will need to add an entry to your ~/.m2/settings.xml file simlilar\nto:\n\n{pygmentize:: xml}\n<server>\n  <id>${project_id}-website</id>\n  <username>xxxx</username>\n  <password>xxxxx</password>\n</server>\n{pygmentize}" );
        } ) ) ) );
        $_scalate_$_context << ( "\n</div>\n" );
      }
    }
  }
}


class $_scalate_$_scalate_tmp_5725572223700121517_jade extends _root_.org.fusesource.scalate.Template {
  def render(context: _root_.org.fusesource.scalate.RenderContext): Unit = $_scalate_$_scalate_tmp_5725572223700121517_jade.$_scalate_$render(context)
}
