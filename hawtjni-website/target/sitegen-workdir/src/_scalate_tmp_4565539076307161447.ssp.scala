/* NOTE this file is autogenerated by Scalate : see http://scalate.fusesource.org/ */

import _root_.scala.collection.JavaConversions._
import _root_.org.fusesource.scalate.support.TemplateConversions._
import _root_.org.fusesource.scalate.util.Measurements._

object $_scalate_$_scalate_tmp_4565539076307161447_ssp {
  def $_scalate_$render($_scalate_$_context: _root_.org.fusesource.scalate.RenderContext): Unit = {
    ;{
      implicit val context: _root_.org.fusesource.scalate.support.DummyRenderContext = $_scalate_$_context.attribute("context")
      import context._
      ;{
        val response: _root_.org.fusesource.scalate.support.DummyResponse = $_scalate_$_context.attributeOrElse("response", new _root_.org.fusesource.scalate.support.DummyResponse())
        
    // common imports go here
    import _root_.Website._;
    
        
        $_scalate_$_context << ( "\n## Building with Maven\n\n" );
        $_scalate_$_context <<< (         project_name
 );
        $_scalate_$_context << ( " uses [Maven](http://maven.apache.org/) as its primary\nbuild tool for performing releases and uses the pom.xml to describe\ndependencies between modules.\n\n### Prequisites\n\n*Required:*\n\n* Java 1.6\n* Download and [install Maven 3](http://maven.apache.org/download.html)\n* Get the latest [source](source.html)\n\n### Maven options\n\nTo build " );
        $_scalate_$_context <<< (         project_name
 );
        $_scalate_$_context << ( " maven has to be configured to use more memory\n\n    set MAVEN_OPTS=-Xmx512m -XX:MaxPermSize=128m\n\n### A normal build\n\n    mvn install\n\nOnce the build completes, you will find the binary distribution of \n" );
        $_scalate_$_context <<< (         project_name
 );
        $_scalate_$_context << ( " located in the `hawtjni-distro/target` directory.\n\n\n### Doing a Quick Build\n\nThe following avoids running all the unit test cases, we just skip the\ntest running phase and not the building part\n\n    mvn -Dtest=false install\n\n### Using an IDE\n\nIf you prefer to use an IDE then you can auto-generate the IDE's project\nfiles using maven plugins. e.g.\n\n    mvn eclipse:eclipse\n        \nor      \n        \n    mvn idea:idea\n\n### Importing into Eclipse\n\nIf you have not already done so, you will need to make Eclipse aware of\nthe Maven repository so that it can build everything. In the preferences,\ngo to `Java -> Build Path -> Classpath` and define a new Classpath\nVariable named `M2_REPO` that points to your local Maven repository. i.e.\n`~/.m2/repository` on Unix and `c:\\Documents and Settings\\$username\\.m2\\repository` \non Windows).\n\nYou can also get Maven to do this for you:\n\n    mvn eclipse:add-maven-repo -Declipse.workspace=/path/to/the/workspace/ \n\n### See Also\n\n* [Source](source.html)\n* [Developer Links](developers.html)\n" );
      }
    }
  }
}


class $_scalate_$_scalate_tmp_4565539076307161447_ssp extends _root_.org.fusesource.scalate.Template {
  def render(context: _root_.org.fusesource.scalate.RenderContext): Unit = $_scalate_$_scalate_tmp_4565539076307161447_ssp.$_scalate_$render(context)
}
